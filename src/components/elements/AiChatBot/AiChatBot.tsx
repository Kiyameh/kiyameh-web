import React, {useState, useRef, useEffect} from 'react'
import {Send, X} from 'lucide-react'
import styles from './AiChatBot.module.css'
import Grapper from '@/components/package/Grapper'

interface Message {
  id: string
  content: string
  isUser: boolean
  timestamp: Date
}

export default function AiChatBot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const suggestedMessages = [
    '¿Cómo te han creado?',
    'Muestrame su trabajo',
    'Hablemos!',
  ]

  const mockAIResponse = '¡Pronto estaré programada y podremos charlar!'

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({behavior: 'smooth'})
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen])

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      isUser: true,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)

    // Simulate AI response delay
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: mockAIResponse,
        isUser: false,
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, aiMessage])
      setIsTyping(false)
    }, 1500)
  }

  const handleInputSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    handleSendMessage(inputValue)
  }

  const handleSuggestedMessage = (message: string) => {
    handleSendMessage(message)
  }

  return (
    <div className={styles.chatContainer}>
      {/* Chat Dialog */}
      <div
        className={`${styles.chatDialog} ${
          isOpen ? styles.open : styles.closed
        }`}
      >
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.headerIcon}>
              <svg
                width="512"
                height="512"
                viewBox="0 0 512 512"
                fill="currentColor"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M196.259 23L195.259 31.1C181.259 92.6 216.259 119.76 216.259 119.76L227.259 106.76C227.259 106.76 203.259 87 209.259 43.2C250.259 54.8 267.259 79.8 273.259 92C233.224 106.34 219.681 141.99 199.487 171.424C197.403 174.462 200.027 178.703 203.649 178.03L210.58 176.743C212.65 176.359 214.664 177.645 215.185 179.685L221.268 203.484C221.815 205.624 223.987 206.952 226.175 206.64C235.209 205.355 258.206 204.224 277.415 221.33C279.409 223.105 282.609 222.745 283.721 220.318C287.168 212.795 288.903 204.327 287.259 195.86L284.259 167.66C284.259 164 277.259 154.66 273.259 152.26C261.259 144.96 248.259 149.16 248.259 149.16C246.259 147.26 246.259 143.96 247.259 141.36C249.259 138.86 253.518 137.82 254.259 137.66C255 137.5 265.259 135.16 275.259 138.36C286.259 142.26 295.259 153.66 296.259 165.96C297.259 174.36 299.259 184.86 300.259 194.26C302.012 207.757 298.388 221.254 291.406 232.395C289.574 235.318 289.008 238.918 290.241 242.141L292.8 248.833C294.281 252.704 297.996 255.26 302.14 255.26H326.377C330.522 255.26 334.237 252.704 335.717 248.833L338.277 242.141C339.51 238.918 338.943 235.318 337.111 232.395C330.13 221.254 326.506 207.757 328.259 194.26C329.259 184.86 331.259 174.36 332.259 165.96C333.259 153.66 342.259 143.26 353.259 139.36C363.259 136.16 373 137.334 374.259 137.66C375.518 137.986 379.259 138.86 381.259 141.36C382.259 143.96 382.259 147.26 380.259 149.16C380.259 149.16 367.259 144.96 355.259 152.26C351.259 154.66 344.259 164.5 344.259 167.66L341.259 195.86C339.615 204.327 341.35 212.795 344.797 220.318C345.909 222.745 349.108 223.105 351.103 221.33C370.312 204.224 393.309 205.355 402.343 206.64C404.53 206.952 406.702 205.624 407.25 203.484L413.332 179.685C413.854 177.645 415.868 176.359 417.938 176.743L424.868 178.03C428.49 178.703 431.115 174.462 429.031 171.424C408.836 141.99 395.294 106.34 355.259 92C361.259 79.8 378.259 54.8 419.259 43.2C425.259 87 401.259 106.76 401.259 106.76L412.259 119.76C412.259 119.76 447.259 92.6 433.259 31.1L432.259 23C388.959 30.32 346.359 58.37 322.259 85.9C316.759 85.77 311.759 85.38 306.259 85.9C263.459 51.15 244.959 29.78 196.259 23ZM220.959 228.26C259.159 281.46 133.259 274.86 67.3488 347.76C41.2388 375.76 34.8188 404.06 41.3988 428.06C53.6288 472.06 113.259 501.06 185.459 483.06C235.259 470.06 281.459 451.06 320.259 443.06C352.624 435.683 379.547 437.659 398.05 460.747C400.903 464.307 405.59 466.069 409.927 464.652L410.397 464.499C414.777 463.067 417.637 458.821 417.129 454.241C413.309 419.836 401.922 391.96 381.359 374.56C364.559 360.36 341.459 352.56 310.459 353.46C281.159 354.26 244.559 362.76 199.259 380.76C172.259 390.26 122.759 408.46 96.8588 393.36C87.7588 387.76 84.9588 378.36 85.6588 369.06C118.811 419.174 203.325 347.618 276.007 334.574C280.722 333.728 284.385 329.903 284.308 325.113C283.95 302.783 277.682 241.912 220.959 228.26ZM409.559 228.26C360.078 239.815 347.154 276.811 344.732 323.067C344.437 328.696 349.065 333.264 354.582 334.417C376.596 339.019 394.259 357.06 394.259 357.06C394.259 357.06 367.259 258.46 409.559 228.26ZM309.259 229.56H319.259C322.259 229.56 325.259 232.36 325.259 235.86C325.259 239.26 322.259 242.06 319.259 242.06H309.259C306.259 242.06 303.259 239.26 303.259 235.86C303.259 232.36 306.259 229.56 309.259 229.56ZM370.659 387.26C384.359 398.86 392.859 416.06 397.459 437.06C381.659 425.06 362.459 421.06 340.359 423.06C316.259 425.06 288.459 433.06 258.059 443.06L284.159 418.06C255.859 432.06 231.059 435.06 208.759 430.06L289.659 389.86L228.459 401.06C252.259 380.86 323.659 348.86 370.659 387.26Z"
                  fill="currentColor"
                />
              </svg>
            </div>
            <div className={styles.headerText}>
              <p>Boira AI</p>
            </div>
          </div>
          <div>
            <button
              onClick={() => setIsOpen(false)}
              className={styles.minimizeButton}
            >
              <X />
            </button>
          </div>
        </div>

        {/* Messages Area */}
        <div className={styles.messagesArea}>
          {messages.length === 0 && (
            <div className={styles.welcomeScreen}>
              <div className={styles.welcomeIcon}>
                <svg
                  width="512"
                  height="512"
                  viewBox="0 0 512 512"
                  fill="currentColor"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M38.9207 31L37.0811 46.6936C11.3259 165.849 75.7138 218.471 75.7138 218.471L95.95 193.284C95.95 193.284 51.7983 154.999 62.8362 70.1372C138.262 92.612 169.536 141.049 180.574 164.686C103.381 193.806 79.7261 268.281 39.4062 326.71C37.331 329.717 39.9508 333.827 43.5364 333.125L68.2814 328.285C70.3809 327.875 72.4319 329.189 72.9364 331.268L85.7844 384.208C86.3147 386.393 88.5287 387.746 90.7397 387.337C104.748 384.747 152.937 379.407 191.429 418.388C193.361 420.345 196.678 419.972 197.883 417.5C205.483 401.916 209.648 383.915 206.329 365.913L200.81 311.276C200.81 304.185 187.933 286.089 180.574 281.439C158.498 267.296 134.583 275.433 134.583 275.433C130.903 271.752 130.903 265.358 132.743 260.321C136.422 255.477 144.257 253.462 145.621 253.152C146.984 252.842 165.857 248.308 184.253 254.508C204.49 262.064 221.047 284.152 222.886 307.983C224.726 324.258 228.405 344.601 230.245 362.813C233.697 390.806 225.814 418.799 211.154 441.192C209.345 443.955 208.843 447.4 209.971 450.504L218.654 474.414C220.09 478.368 223.847 481 228.054 481H283.946C288.153 481 291.91 478.368 293.346 474.414L302.029 450.504C303.157 447.4 302.655 443.955 300.846 441.192C286.186 418.799 278.303 390.806 281.755 362.813C283.595 344.601 287.274 324.258 289.114 307.983C290.953 284.152 307.51 264.002 327.747 256.446C346.143 250.246 364.063 252.52 366.379 253.152C368.695 253.783 375.578 255.477 379.257 260.321C381.097 265.358 381.097 271.752 377.417 275.433C377.417 275.433 353.502 267.296 331.426 281.439C324.067 286.089 311.19 305.154 311.19 311.276L305.671 365.913C302.352 383.915 306.517 401.916 314.117 417.5C315.322 419.972 318.638 420.345 320.571 418.388C359.063 379.407 407.252 384.747 421.26 387.337C423.471 387.746 425.685 386.393 426.216 384.208L439.064 331.268C439.568 329.189 441.619 327.875 443.719 328.285L468.464 333.125C472.049 333.827 474.669 329.717 472.594 326.71C432.274 268.281 408.619 193.806 331.426 164.686C342.464 141.049 373.738 92.612 449.164 70.1372C460.202 154.999 416.05 193.284 416.05 193.284L436.286 218.471C436.286 218.471 500.674 165.849 474.919 46.6936L473.079 31C393.422 45.1824 315.053 99.5288 270.717 152.868C260.599 152.616 251.401 151.86 241.283 152.868C162.546 85.5402 128.512 44.1361 38.9207 31ZM246.802 431.207H265.198C270.717 431.207 276.236 436.632 276.236 443.413C276.236 450 270.717 455.425 265.198 455.425H246.802C241.283 455.425 235.764 450 235.764 443.413C235.764 436.632 241.283 431.207 246.802 431.207Z"
                    fill="currentColor"
                  />
                </svg>
              </div>
              <h4 className={styles.welcomeTitle}>¡Hola! Me llamo Boira,</h4>
              <p className={styles.welcomeSubtitle}>
                Y soy la ayudante de Andoni. ¿En que puedo ayudarte?
              </p>

              {/* Suggested Messages */}
              <div className={styles.suggestedMessages}>
                {suggestedMessages.map((message, index) => (
                  <Grapper
                    mode="ghost"
                    variant="sticky"
                  >
                    <button
                      key={index}
                      onClick={() => handleSuggestedMessage(message)}
                      className={styles.suggestedButton}
                    >
                      {message}
                    </button>
                  </Grapper>
                ))}
              </div>
            </div>
          )}

          {messages.map((message) => (
            <div
              key={message.id}
              className={`${styles.messageRow} ${
                message.isUser ? styles.user : styles.ai
              }`}
            >
              <div
                className={`${styles.messageBubble} ${
                  message.isUser ? styles.user : styles.ai
                }`}
              >
                <p className={styles.messageText}>{message.content}</p>
                <p
                  className={`${styles.messageTime} ${
                    message.isUser ? styles.user : styles.ai
                  }`}
                >
                  {message.timestamp.toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                  })}
                </p>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className={styles.typingIndicator}>
              <div className={styles.typingBubble}>
                <div className={styles.typingDots}>
                  <div className={styles.typingDot}></div>
                  <div className={styles.typingDot}></div>
                  <div className={styles.typingDot}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className={styles.inputArea}>
          <form
            onSubmit={handleInputSubmit}
            className={styles.inputForm}
          >
            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Escribe tu mensaje..."
              className={styles.messageInput}
            />
            <button
              type="submit"
              disabled={!inputValue.trim() || isTyping}
              className={styles.sendButton}
            >
              <Send />
            </button>
          </form>
        </div>
      </div>

      {/* Floating Action Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={styles.floatingButton}
      >
        <svg
          width="512"
          height="512"
          viewBox="0 0 512 512"
          fill="currentColor"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M38.9207 31L37.0811 46.6936C11.3259 165.849 75.7138 218.471 75.7138 218.471L95.95 193.284C95.95 193.284 51.7983 154.999 62.8362 70.1372C138.262 92.612 169.536 141.049 180.574 164.686C103.381 193.806 79.7261 268.281 39.4062 326.71C37.331 329.717 39.9508 333.827 43.5364 333.125L68.2814 328.285C70.3809 327.875 72.4319 329.189 72.9364 331.268L85.7844 384.208C86.3147 386.393 88.5287 387.746 90.7397 387.337C104.748 384.747 152.937 379.407 191.429 418.388C193.361 420.345 196.678 419.972 197.883 417.5C205.483 401.916 209.648 383.915 206.329 365.913L200.81 311.276C200.81 304.185 187.933 286.089 180.574 281.439C158.498 267.296 134.583 275.433 134.583 275.433C130.903 271.752 130.903 265.358 132.743 260.321C136.422 255.477 144.257 253.462 145.621 253.152C146.984 252.842 165.857 248.308 184.253 254.508C204.49 262.064 221.047 284.152 222.886 307.983C224.726 324.258 228.405 344.601 230.245 362.813C233.697 390.806 225.814 418.799 211.154 441.192C209.345 443.955 208.843 447.4 209.971 450.504L218.654 474.414C220.09 478.368 223.847 481 228.054 481H283.946C288.153 481 291.91 478.368 293.346 474.414L302.029 450.504C303.157 447.4 302.655 443.955 300.846 441.192C286.186 418.799 278.303 390.806 281.755 362.813C283.595 344.601 287.274 324.258 289.114 307.983C290.953 284.152 307.51 264.002 327.747 256.446C346.143 250.246 364.063 252.52 366.379 253.152C368.695 253.783 375.578 255.477 379.257 260.321C381.097 265.358 381.097 271.752 377.417 275.433C377.417 275.433 353.502 267.296 331.426 281.439C324.067 286.089 311.19 305.154 311.19 311.276L305.671 365.913C302.352 383.915 306.517 401.916 314.117 417.5C315.322 419.972 318.638 420.345 320.571 418.388C359.063 379.407 407.252 384.747 421.26 387.337C423.471 387.746 425.685 386.393 426.216 384.208L439.064 331.268C439.568 329.189 441.619 327.875 443.719 328.285L468.464 333.125C472.049 333.827 474.669 329.717 472.594 326.71C432.274 268.281 408.619 193.806 331.426 164.686C342.464 141.049 373.738 92.612 449.164 70.1372C460.202 154.999 416.05 193.284 416.05 193.284L436.286 218.471C436.286 218.471 500.674 165.849 474.919 46.6936L473.079 31C393.422 45.1824 315.053 99.5288 270.717 152.868C260.599 152.616 251.401 151.86 241.283 152.868C162.546 85.5402 128.512 44.1361 38.9207 31ZM246.802 431.207H265.198C270.717 431.207 276.236 436.632 276.236 443.413C276.236 450 270.717 455.425 265.198 455.425H246.802C241.283 455.425 235.764 450 235.764 443.413C235.764 436.632 241.283 431.207 246.802 431.207Z"
            fill="currentColor"
          />
        </svg>
      </button>
    </div>
  )
}
