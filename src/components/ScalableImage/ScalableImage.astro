---
import {Image} from 'astro:assets'
const {src, alt, thumbnailClass} = Astro.props
const thumbnailClasses = `thumbnail ${thumbnailClass || ''}`
---

<div class="scalable-image-container">
  <Image
    src={src}
    alt={alt}
    class={thumbnailClasses}
  />
  <dialog class="image-dialog">
    <Image
      src={src}
      alt={alt}
      class="full-image"
    />
  </dialog>
</div>

<style>
  .image-dialog {
    background: var(--surface-200);
    margin: auto;
    border-radius: var(--radius-medium);
    user-select: none;
    width: fit-content;
    height: fit-content;
    outline: none;
  }
  .image-dialog {
    opacity: 0;
    transform: scale(0.95);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }

  .image-dialog[open] {
    opacity: 1;
    transform: scale(1);
  }

  dialog::backdrop {
    background: #2a7b9b;
    background: linear-gradient(
      45deg,
      var(--gradient-100) 0%,
      var(--gradient-200) 50%,
      var(--gradient-300) 100%
    );
    opacity: 30%;
  }
  .full-image {
    max-width: min(90vw, 1024px);
    width: 100%;
  }

  :global(.thumbnail) {
    cursor: pointer;
  }
</style>

<script>
  const dialog = document.querySelector('.image-dialog')
  const thumbnail = document.querySelector('.thumbnail')
  const fullImage = document.querySelector('.full-image')

  if (thumbnail && dialog instanceof HTMLDialogElement) {
    thumbnail.addEventListener('click', () => {
      dialog.style.opacity = '0'
      dialog.style.transform = 'scale(0.95)'
      dialog.showModal()

      setTimeout(() => {
        dialog.style.transition = 'opacity 0.3s ease, transform 0.3s ease'
        dialog.style.opacity = '1'
        dialog.style.transform = 'scale(1)'
      }, 10)
    })

    // Cerrar al hacer clic en el diÃ¡logo
    dialog.addEventListener('click', (e) => {
      if (e.target === dialog) {
        dialog.close()
      }
    })

    // Cerrar al hacer clic en la imagen completa
    if (fullImage) {
      fullImage.addEventListener('click', () => {
        dialog.close()
      })
    }
  }
</script>
