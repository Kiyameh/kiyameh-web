---
import HtmlLayout from '@/layouts/HtmlLayout.astro'
import NavLayout from '@/layouts/NavLayout.astro'
import Breadcrumb from '@/components/ui/Breadcrumb/Breadcrumb'
import ProjectTypeBadge from '@/components/ui/ProjectTypeBadge/ProjectTypeBadge'
import SectionTitle from '@/components/ui/SectionTitle/SectionTitle'
import RepoStatsCard from '@/components/elements/RepoStatsCard/RepoStatsCard.astro'
import TechBadgesCarrousel from '@/components/ui/TechBadgesCarrousel/TechBadgesCarrousel'
import ImageGallery from '@/components/ui/ImageGallery/ImageGallery'

import {Code, Info, BookOpen} from 'lucide-react'
import {getCollection} from 'astro:content'
import ProjectStateBadge from '@/components/ui/ProjectStateBadge/ProjectStateBadge'

// Obtener el slug del parámetro dinámico
export async function getStaticPaths() {
  const projects = await getCollection('projects')
  return projects.map((project) => ({
    params: {project: project.data.slug},
    props: {project},
  }))
}

const {project} = Astro.props

const {
  repository,
  description,
  features,
  name,
  type,
  slug,
  technologies,
  url,
  images,
  logo,
  logo_dark,
  state,
  version,
  documentation,
} = project.data

/* 
  @version 1
  @revisado 04/09/2025
  @descripcion: Página de proyecto en español
*/
---

<HtmlLayout pageTitle={name}>
  <NavLayout>
    <div class="container">
      <Breadcrumb
        client:load
        items={[
          {label: 'Inicio', href: '/es'},
          {label: 'Proyectos', href: '/es/projects'},
          {label: name, href: `/es/projects/${slug}`},
        ]}
      />
      <header>
        <div class="name-and-logo">
          {
            logo && (
              <img
                class="logo logo-light"
                src={logo}
                alt={name}
              />
            )
          }
          {
            logo_dark && (
              <img
                class="logo logo-dark"
                src={logo_dark}
                alt={name}
              />
            )
          }
          <SectionTitle
            client:load
            level="title"
          >
            {name}
          </SectionTitle>
        </div>
        <div>
          {version && <span class="version">v{version}</span>}
          {state && <ProjectStateBadge state={state} />}
          <ProjectTypeBadge type={type} />
        </div>
      </header>
      <main>
        <!-- Picture -->
        <picture class="main-picture">
          <img
            src={images?.[0] || ''}
            alt={name}
          />
          <a
            href={url}
            target="_blank"
          >
            <button class="live-button"> Ver online </button>
          </a>
        </picture>

        <!-- Features -->
        <section>
          <header>
            <SectionTitle
              client:load
              id="features"
              level="subtitle"
            >
              Características
            </SectionTitle>
          </header>
          {
            description && (
              <p class="description-box">
                <Info />
                {description}
              </p>
            )
          }
          <ul>
            {
              features &&
                features.map((feature) => (
                  <li class="feature-item">
                    <Code className="feature-icon" />
                    {feature}
                  </li>
                ))
            }
          </ul>
          {
            technologies && (
              <div class="technologies-carrousel">
                <TechBadgesCarrousel
                  client:load
                  technologies={technologies.map((tech) => ({
                    name: tech,
                    disabled: false,
                  }))}
                />
              </div>
            )
          }
        </section>
        {
          documentation && (
            <section>
              <header>
                <SectionTitle
                  client:load
                  id="documentation"
                  level="subtitle"
                >
                  Documentación
                </SectionTitle>
              </header>
              <div class="documentation-link">
                <BookOpen className="documentation-icon" />
                <div class="documentation-content">
                  <p>Consulta la documentación completa del proyecto para obtener información detallada sobre su uso e implementación.</p>
                  <a
                    href={documentation}
                    target="_blank"
                    class="documentation-button"
                  >
                    Ver Documentación
                  </a>
                </div>
              </div>
            </section>
          )
        }
        <section>
          <header>
            <SectionTitle
              client:load
              id="repository"
              level="subtitle"
            >
              Repositorio
            </SectionTitle>
          </header>
          <!-- Server Island con los datos del repositorio -->

          <RepoStatsCard
            repository={repository}
            server:defer
          >
            <div
              class="loaderContainer"
              slot="fallback"
            >
              <div class="loader"></div>
            </div>
          </RepoStatsCard>
        </section>

        {
          images && (
            <section>
              <header>
                <SectionTitle
                  client:load
                  id="screenshots"
                  level="subtitle"
                >
                  Capturas
                </SectionTitle>
              </header>
              <div class="screenshots-container">
                <ImageGallery
                  client:load
                  images={images.map((image) => ({
                    src: image,
                    alt: name,
                  }))}
                />
              </div>
            </section>
          )
        }
      </main>
    </div>
  </NavLayout>
</HtmlLayout>

<style>
  /* Layout */
  .container {
    width: 100%;
    max-width: 1024px;
    min-height: 100vh;
    margin: 0 auto;
    background-color: var(--surface-100);
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 2rem;
    padding: 4rem;
  }

  @media (max-width: 768px) {
    .container {
      padding: 2rem;
    }
  }
  header {
    width: 100%;
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  main {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 3rem;
  }

  section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 1rem;
  }
  section header {
    padding-left: 2rem;
  }
  /* Header */
  .name-and-logo {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .logo {
    max-width: 4rem;
    max-height: 3rem;
  }
  .logo-light {
    display: block;
  }
  .logo-dark {
    display: none;
  }
  /* Mostrar logo oscuro en tema oscuro */
  :global([data-theme='dark']) .logo-light {
    display: none;
  }
  :global([data-theme='dark']) .logo-dark {
    display: block;
  }
  /* Mostrar logo claro en tema claro */
  :global([data-theme='light']) .logo-light {
    display: block;
  }
  :global([data-theme='light']) .logo-dark {
    display: none;
  }
  .version {
    font-size: 0.9rem;
  }

  /* Picture */
  .main-picture {
    position: relative;
    cursor: pointer;
  }
  .main-picture::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: black;
    opacity: 0;
    backdrop-filter: blur(10px);
    border-radius: var(--radius-medium);
    transition: opacity 0.3s ease-in-out;
  }
  .main-picture:hover::before {
    opacity: 0.5;
  }
  .main-picture img {
    width: 100%;
    border-radius: var(--radius-medium);
    border: 1px solid var(--border);
  }
  .live-button {
    opacity: 0;
    position: absolute;
    top: 50%;
    right: 50%;
    transform: translate(50%, -50%);
    background: var(--accent);
    color: var(--accent-content);
    padding: 1rem 2rem;
    border-radius: var(--radius-medium);
    box-shadow: var(--shadow-large);
    transition: opacity 0.3s ease-in-out;
    cursor: pointer;
  }

  .main-picture:hover .live-button {
    opacity: 1;
  }
  @media (max-width: 768px) {
    .live-button {
      padding: 0.5rem 1rem;
      opacity: 1;
    }
  }

  /* Features */

  .description-box {
    width: 100%;
    padding: 1rem 2rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    background-color: var(--surface-300);
    border-radius: var(--radius-large);
  }
  .feature-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: 2rem;
  }
  .feature-icon {
    width: 1.2rem;
    color: var(--accent);
  }
  .technologies-carrousel {
    width: 100%;
    overflow: hidden;
    padding: 1rem;
    position: relative;
  }

  /* Loader */
  .loaderContainer {
    width: 100%;
    height: 120px;
    background: var(--surface-300);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: var(--radius-large);
    gap: 1rem;
  }

  .loader {
    width: 32px;
    height: 32px;
    border: 3px solid var(--border);
    border-bottom-color: var(--primary);
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
  }
  @keyframes rotation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Documentation */
  .documentation-link {
    width: 100%;
    padding: 2rem;
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
    background-color: var(--surface-300);
    border-radius: var(--radius-large);
  }

  .documentation-icon {
    width: 2rem;
    height: 2rem;
    color: var(--accent);
    flex-shrink: 0;
  }

  .documentation-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    flex: 1;
  }

  .documentation-content p {
    margin: 0;
    color: var(--text-secondary);
    line-height: 1.6;
  }

  .documentation-button {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    background-color: var(--surface-100);
    color: var(--content);
    text-decoration: none;
    border-radius: var(--radius-medium);
    font-weight: 500;
    transition: all 0.2s ease-in-out;
    align-self: flex-start;
  }

  .documentation-button:hover {
    background-color: var(--accent);
  }

  @media (max-width: 768px) {
    .documentation-link {
      padding: 1.5rem;
      gap: 1rem;
    }
    
    .documentation-icon {
      width: 1.5rem;
      height: 1.5rem;
    }
  }
</style>
