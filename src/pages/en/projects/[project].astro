---
import PortfolioLayout from '@/layouts/PortfolioLayout.astro'
import Breadcrumb from '@/components/ui/Breadcrumb/Breadcrumb'
import ProjectTypeBadge from '@/components/ui/ProjectTypeBadge/ProjectTypeBadge'
import SectionTitle from '@/components/ui/SectionTitle/SectionTitle'
import LinesOfCode from '@/components/elements/LinesOfCode/LinesOfCode'
import RepoStatsCard from '@/components/elements/RepoStatsCard/RepoStatsCard'
import TechBadgesCarrousel from '@/components/ui/TechBadgesCarrousel/TechBadgesCarrousel'
import ImageGallery from '@/components/ui/ImageGallery/ImageGallery'

import {Code, Info} from 'lucide-react'
import {getCollection} from 'astro:content'

// Get the slug from the dynamic parameter
export async function getStaticPaths() {
  const projects = await getCollection('projects')
  return projects.map((project) => ({
    params: {project: project.data.slug},
    props: {project},
  }))
}

const {project} = Astro.props

const {
  repository,
  description,
  features,
  name,
  type,
  slug,
  technologies,
  url,
  images,
  logo,
} = project.data

const repoSlug = `${repository?.split('/')[3]}/${repository?.split('/')[4]}`
---

<PortfolioLayout>
  <div class="container">
    <Breadcrumb
      client:load
      items={[
        {label: 'Home', href: '/en'},
        {label: 'Projects', href: '/en/projects'},
        {label: name, href: `/en/projects/${slug}`},
      ]}
    />
    <header>
      <div class="name-and-logo">
        {
          logo && (
            <img
              class="logo"
              src={logo}
              alt={name}
            />
          )
        }
        <SectionTitle
          client:load
          level="title"
        >
          {name}
        </SectionTitle>
      </div>
      <ProjectTypeBadge type={type} />
    </header>
    <main>
      <!-- Picture -->
      <picture class="main-picture">
        <img
          src={images?.[0] || ''}
          alt={name}
        />
        <a
          href={url}
          target="_blank"
        >
          <button class="live-button"> View online </button>
        </a>
      </picture>

      <!-- Features -->
      <section>
        <header>
          <SectionTitle
            client:load
            id="features"
            level="subtitle"
          >
            Features
          </SectionTitle>
        </header>
        {
          description && (
            <p class="description-box">
              <Info />
              {description}
            </p>
          )
        }
        <ul>
          {
            features &&
              features.map((feature) => (
                <li class="feature-item">
                  <Code className="feature-icon" />
                  {feature}
                </li>
              ))
          }
        </ul>
        {
          technologies && (
            <div class="technologies-carrousel">
              <TechBadgesCarrousel
                client:load
                technologies={technologies.map((tech) => ({
                  name: tech,
                  disabled: false,
                }))}
              />
            </div>
          )
        }
      </section>
      <section>
        <header>
          <SectionTitle
            client:load
            id="repository"
            level="subtitle"
          >
            Repository
          </SectionTitle>
          {
            repository && (
              <LinesOfCode
                client:load
                repositoryUrl={repository}
                language="en"
              />
            )
          }
        </header>
        <div class="repo-stats">
          <RepoStatsCard
            client:load
            repo={repoSlug}
            githubAuthToken={import.meta.env.GITHUB_AUTH_TOKEN}
          />
        </div>
      </section>
      {
        images && (
          <section>
            <header>
              <SectionTitle
                client:load
                id="screenshots"
                level="subtitle"
              >
                Screenshots
              </SectionTitle>
            </header>
            <div class="screenshots-container">
              <ImageGallery
                client:load
                images={images.map((image) => ({
                  src: image,
                  alt: name,
                }))}
              />
            </div>
          </section>
        )
      }
    </main>
  </div>
</PortfolioLayout>

<style>
  /* Layout */
  .container {
    width: 100%;
    max-width: 1024px;
    min-height: 100vh;
    margin: 0 auto;
    background-color: var(--surface-100);
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 2rem;
    padding: 4rem;
  }

  @media (max-width: 768px) {
    .container {
      padding: 2rem;
    }
  }
  header {
    width: 100%;
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  main {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 3rem;
  }

  section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 1rem;
  }
  section header {
    padding-left: 2rem;
  }
  /* Header */
  .name-and-logo {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .logo {
    max-width: 4rem;
    max-height: 3rem;
  }

  /* Picture */
  .main-picture {
    position: relative;
    cursor: pointer;
  }
  .main-picture::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: black;
    opacity: 0;
    backdrop-filter: blur(10px);
    border-radius: var(--radius-medium);
    transition: opacity 0.3s ease-in-out;
  }
  .main-picture:hover::before {
    opacity: 0.5;
  }
  .main-picture img {
    width: 100%;
    border-radius: var(--radius-medium);
    border: 1px solid var(--border);
  }
  .live-button {
    opacity: 0;
    position: absolute;
    top: 50%;
    right: 50%;
    transform: translate(50%, -50%);
    background: var(--accent);
    color: var(--accent-content);
    padding: 1rem 2rem;
    border-radius: var(--radius-medium);
    box-shadow: var(--shadow-large);
    transition: opacity 0.3s ease-in-out;
    cursor: pointer;
  }

  .main-picture:hover .live-button {
    opacity: 1;
  }
  @media (max-width: 768px) {
    .live-button {
      padding: 0.5rem 1rem;
      opacity: 1;
    }
  }

  /* Features */

  .description-box {
    width: 100%;
    padding: 1rem 2rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    background-color: var(--surface-300);
    border-radius: var(--radius-large);
  }
  .feature-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: 2rem;
  }
  .feature-icon {
    width: 1.2rem;
    color: var(--accent);
  }
  .technologies-carrousel {
    width: 100%;
    overflow: hidden;
    padding: 1rem;
    position: relative;
  }
  /* Stats */
  .repo-stats {
    width: 100%;
    padding: 0rem;
    background-color: var(--surface-300);
    border-radius: var(--radius-large);
    min-height: 100px;
    --stat-card-surface: var(--surface-300);
    --stat-card-border: transparent;
    --stat-card-shadow: var(--shadow-large);
    --stat-card-radius: var(--radius-large);
    --stat-card-text-primary: var(--content);
    --stat-card-text-secondary: var(--border);
    --stat-card-text-muted: var(--content-muted);
    --stat-card-accent: var(--primary);
    --stat-card-accent-hover: var(--accent);
  }
</style>
