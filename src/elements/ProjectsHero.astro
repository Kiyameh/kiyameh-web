---
import { FileCode2 } from "lucide-react";

interface Props {
	language?: "es" | "en";
}

const { language = "es" } = Astro.props;

const translations = {
	es: {
		featured: "Principales",
		projects: "Proyectos",
		subtitle: "Una colección de los proyectos más destacados",
		languageClass: "spanish-featured-text",
	},
	en: {
		featured: "Featured",
		projects: "Projects",
		subtitle: "A collection of my most featured works",
		languageClass: "english-featured-text",
	},
};

const t = translations[language];
---

<div class="spacer"></div>
<div class="sentinel"></div>
<header class="header">
  <div>
    <FileCode2 id="icon" />
  </div>
  <div class="header-text">
    <h1 class="header-title">
      <div class={t.languageClass}>{t.featured}</div>
      <div class="header-projects-text">{t.projects}</div>
    </h1>
    <p class="header-subtitle">
      {t.subtitle}
    </p>
  </div>
</header>
<div class="spacer"></div>

<style>
  /* Header spacer */
  .spacer {
    width: 100%;
    height: 45svh;
  }
  /* Sentinel element to trigger header stickyness */
  .sentinel {
    height: 1px;
  }

  /* Header */
  header {
    position: sticky;
    top: 0;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: start;
    gap: 4px;
    width: 100%;
    max-width: 420px;
    height: auto;
    transition: max-width 0.5s ease-in-out;
  }

  header.at-the-top {
    max-width: 140px;
  }
  @media (max-width: 350px) {
    header {
      max-width: 140px;
    }
  }

  /* Icon */
  header #icon {
    min-width: 50px;
    width: 50px;
    transition: width 0.5s ease-in-out;
  }
  header.at-the-top #icon {
    min-width: 40px;
    width: 40px;
  }
  @media (max-width: 350px) {
    header #icon {
      min-width: 40px;
      width: 40px;
    }
  }

  /* Title */
  header .header-title {
    font-size: 2rem;
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  /* Featured text */
  header .spanish-featured-text,
  header .english-featured-text {
    height: 50px;
    overflow: hidden;
    transition: width 0.5s ease-in-out;
    padding-left: 1px;
  }
  header .spanish-featured-text {
    width: 172px;
  }
  header .english-featured-text {
    width: 144px;
  }

  header.at-the-top .spanish-featured-text,
  header.at-the-top .english-featured-text {
    width: 1px;
  }
  @media (max-width: 350px) {
    header .spanish-featured-text,
    header .english-featured-text {
      width: 1px;
    }
  }
  /* Projects text */
  header .header-projects-text {
    width: 80px;
  }

  /* Subtitle */
  header .header-subtitle {
    font-size: 1.2rem;
    text-wrap: wrap;

    height: 30px;
    transition:
      opacity 0.5s ease-in-out,
      visibility 0.5s ease-in-out,
      height 0.5s ease-in-out,
      width 0.5s ease-in-out;
  }

  header.at-the-top .header-subtitle {
    opacity: 0;
    visibility: hidden;
    height: 1px;
    overflow: hidden;
  }
  @media (max-width: 350px) {
    header .header-subtitle {
      opacity: 0;
      visibility: hidden;
      height: 1px;
      overflow: hidden;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sentinel = document.querySelector('.sentinel')
    const header = document.querySelector('.header')

    const observerOptions = {
      root: null, // Observa intersecciones con el viewport
      rootMargin: '0px', // Sin margen adicional
      threshold: 0, // Se dispara en cuanto el elemento entra o sale (incluso 1px)
    }

    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting && header) {
          header.classList.add('at-the-top')
        } else if (header) {
          header.classList.remove('at-the-top')
        }
      })
    }

    const observer = new IntersectionObserver(observerCallback, observerOptions)
    if (sentinel) observer.observe(sentinel)
  })
</script>
